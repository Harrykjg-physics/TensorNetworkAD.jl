var documenterSearchIndex = {"docs":
[{"location":"#TensorNetworkAD.jl-1","page":"Home","title":"TensorNetworkAD.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [TensorNetworkAD]","category":"page"},{"location":"#TensorNetworkAD.ctmrg-Tuple{AbstractArray{#s37,4} where #s37,Integer,Real,Integer}","page":"Home","title":"TensorNetworkAD.ctmrg","text":"ctmrg(a, χ, tol, maxit::Integer, cinit = nothing, tinit = nothing, randinit = false)\n\nreturns a tuple (c,t) where c is the corner-transfer matrix of a and t is the half-infinite column/row tensor of a. a is assumed to satisfy symmetries w.r.t all possible permutations of its indices. Initial values for c and t can be provided via keyword-arguments. If no values are provided, c and t are initialized with random values (if randinit = true) or by reducing over indices of a (otherwise).\n\nThe ctmrg-algorithm is run for up to maxit iterations with bond-dimension χ for the environment. If the sum of absolute differences between cs singular values between two steps is below tol the algorithm is assumed to be converged.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.hamiltonian-Tuple{Heisenberg}","page":"Home","title":"TensorNetworkAD.hamiltonian","text":"hamiltonian(::Heisenberg; Jz::Float64 = 1.0, Jx::Float64 = 1.0, Jy::Float64 = 1.0)\n\nreturn the heisenberg hamiltonian with fields Jz, Jx and Jy as a two-site operator\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.hamiltonian-Tuple{TFIsing}","page":"Home","title":"TensorNetworkAD.hamiltonian","text":"hamiltonian(::TFIsing; hx::Float64 = 1.0)\n\nreturn the transverse field ising hamiltonian with transverse magnetic field hx as a two-site operator.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.mag_tensor-Tuple{Ising,Any}","page":"Home","title":"TensorNetworkAD.mag_tensor","text":"model_tensor(::Ising,β)\n\nreturn the operator for the magnetisation at inverse temperature β at a site in the two-dimensional ising model on a grid in tensor-network form.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.model_tensor-Tuple{Ising,Real}","page":"Home","title":"TensorNetworkAD.model_tensor","text":"model_tensor(::Ising,β)\n\nreturn the isingtensor at inverse temperature β for a two-dimensional grid tensor-network.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.num_grad-Tuple{Any,AbstractArray}","page":"Home","title":"TensorNetworkAD.num_grad","text":"num_grad(f, K::AbstractArray; [δ = 1e-5])\n\nreturn the numerical gradient of f for each element of K.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.num_grad-Tuple{Any,Real}","page":"Home","title":"TensorNetworkAD.num_grad","text":"num_grad(f, K::Real; [δ = 1e-5])\n\nreturn the numerical gradient of f at K calculated with (f(K+δ/2) - f(K-δ/2))/δ\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.optimiseipeps-NTuple{5,Any}","page":"Home","title":"TensorNetworkAD.optimiseipeps","text":"optimiseipeps(t, h, χ, tol, maxit; optimargs = (), optimmethod = LBFGS(m = 20))\n\nreturn the tensor t' that describes an ipeps that minimises the energy of the two-site hamiltonian h. The minimization is done using Optim with default-method LBFGS. Alternative methods can be specified by loading LineSearches and providing optimmethod. Other options to optim can be passed with optimargs. The energy is calculated using ctmrg with parameters χ, tol and maxit.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.trg-Union{Tuple{T}, Tuple{AbstractArray{T,4},Any,Any}} where T","page":"Home","title":"TensorNetworkAD.trg","text":"trg(a, χ, niter)\n\nreturn the partition-function of a two-dimensional system of size 2^niter described by the tensor a calculated via the tensor renormalization group algorithm. a is a rank-4 tensor with the following indices:\n\n    |1\n4--[a]--2\n   3|\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.StopFunction-Tuple{Any}","page":"Home","title":"TensorNetworkAD.StopFunction","text":"(st::StopFunction)(state)\n\nstopfunction for ctmrg, returning true if singular values are converged or the maximum number of iterations is reached.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.ctmrgstep-Tuple{Any,Any}","page":"Home","title":"TensorNetworkAD.ctmrgstep","text":"ctmrgstep((c,t,vals), (a, χ, d))\n\nevaluate one step of the ctmrg-algorithm, returning an updated (c,t,vals) which results from growing, renormalizing and symmetrizing c and t with a. vals are the singular values of the grown corner-matrix normalized such that the leading singular value is 1.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.diaglocalhamiltonian-Tuple{Array{T,1} where T}","page":"Home","title":"TensorNetworkAD.diaglocalhamiltonian","text":"diaglocalhamiltonian(diag::Vector)\n\nreturn the 2-site Hamiltonian with single-body terms given by the diagonal diag.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.energy-NTuple{5,Any}","page":"Home","title":"TensorNetworkAD.energy","text":"energy(h, tin, χ, tol, maxit)\n\nreturn the energy of the ipeps described by local rank-5 tensors tin with 2-site hamiltonian h and calculated via a ctmrg with parameters χ, tol and maxit.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.expectationvalue-Tuple{Any,Any,Any}","page":"Home","title":"TensorNetworkAD.expectationvalue","text":"expectationvalue(h, a, (c,t))\n\nreturn the expectationvalue of a two-site operator h with the sites described by rank-5 tensor a each and an environment described by a corner tensor c and row/column tensor t.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.fixedpoint-NTuple{4,Any}","page":"Home","title":"TensorNetworkAD.fixedpoint","text":"fixedpoint(f, guess, init, stopfun)\n\nreturn the result of applying guess = f(guess,init) until convergence. Convergence is decided by applying stopfun(guess) which returns a Boolean.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.indexperm_symmetrize-Tuple{AbstractArray{#s41,5} where #s41}","page":"Home","title":"TensorNetworkAD.indexperm_symmetrize","text":"indexperm_symmetrize(x::AbstractArray{T,5})\n\nreturn a normalized x whith left-right, up-down, diagonal and rotational symmetry.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.initializec-Tuple{Any,Any,Any}","page":"Home","title":"TensorNetworkAD.initializec","text":"initializec(a, χ, randinit)\n\nreturn a χ×χ corner-matrix c. if randinit == true, return a random matrix, otherwise return a with two indices summed over embedded in a χ×χ zeros-matrix.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.initializet-Tuple{Any,Any,Any}","page":"Home","title":"TensorNetworkAD.initializet","text":"initializet(a, χ, randinit)\n\nreturn a χ×d×χ tensor t where d is the dimension of the indices of a. if randinit == true, return a random matrix, otherwise return a with two indices summed over embedded in a χ×d×χ zeros-matrix.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.magnetisation-Union{Tuple{MT}, Tuple{MT,Any,Any}} where MT<:TensorNetworkAD.Model","page":"Home","title":"TensorNetworkAD.magnetisation","text":"magnetisation(Ising(), β, χ)\n\nreturn the magnetisation of the isingmodel as a function of the inverse temperature β and the environment bonddimension χ as calculated with ctmrg.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.magofβ-Tuple{Any}","page":"Home","title":"TensorNetworkAD.magofβ","text":"magofβ(β)\n\nreturn the analytical result for the magnetisation at inverse temperature β for the 2d classical ising model.\n\n\n\n\n\n","category":"method"},{"location":"#TensorNetworkAD.tensorfromclassical-Tuple{Array{T,2} where T}","page":"Home","title":"TensorNetworkAD.tensorfromclassical","text":"tensorfromclassical(h::Matrix)\n\ngiven a classical 2-body hamiltonian h, return the corresponding tensor for use in e.g. trg for a two-dimensional square-lattice.\n\nExample\n\njulia> model_tensor(Ising(),β) ≈ tensorfromclassical([β -β; -β β])\n\ntrue\n\n\n\n\n\n","category":"method"}]
}
